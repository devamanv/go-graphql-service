package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"go-graphql-service/graph/model"
)

// Hardcoded sample data.
var slas = []*model.SLA{
	{ID: "1", Name: "SLA Domain 1", TotalStorage: 123456789},
	{ID: "2", Name: "SLA Domain 2", TotalStorage: 987654321},
}

// Slas is the resolver for the slas field.
func (r *queryResolver) Slas(ctx context.Context) ([]*model.SLA, error) {
	return slas, nil
}

// SLA resolves the sla query to return a single SLA by its ID.
func (r *queryResolver) SLA(ctx context.Context, id string) (*model.SLA, error) {
	for _, sla := range slas {
		if sla.ID == id {
			return sla, nil
		}
	}
	return nil, fmt.Errorf("SLA with ID %s not found", id)
}

// TotalStorage resolves the totalStorage query to return the sum of storage across all SLAs.
func (r *queryResolver) TotalStorage(ctx context.Context) (float64, error) {
	var total float64
	for _, sla := range slas {
		total += sla.TotalStorage
	}
	return total, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
type mutationResolver struct{ *Resolver }
*/
